/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.shary2023.docs;

import com.github.shary2023.docs.model.BaseResponse;
import com.github.shary2023.docs.model.GuestSchema;
import com.github.shary2023.docs.model.OwnerSchema;
import com.github.shary2023.docs.model.RenterSchema;
import com.github.shary2023.docs.model.UserResponseSchema;
import com.github.shary2023.docs.model.UserSchema;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-18T19:02:55.410103200+06:00[Asia/Almaty]")
@Validated
@Tag(name = "users", description = "Methods available only to the administrator")
public interface UsersApi {

    /**
     * PATCH /users/{userId} : Change fields in the user entity.
     * Change fields in the user entity by its ID.
     *
     * @param userId User entity ID. (required)
     * @param userSchema  (required)
     * @return Successful response to user change. (status code 200)
     *         or User input error. (status code 400)
     *         or The user with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "changeUserById",
        summary = "Change fields in the user entity.",
        description = "Change fields in the user entity by its ID.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to user change.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The user with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> changeUserById(
        @Parameter(name = "userId", description = "User entity ID.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UserSchema", description = "", required = true) @Valid @RequestBody UserSchema userSchema
    );


    /**
     * PATCH /users/profile : Change fields in the user entity.
     * Change fields in the user entity by its profile.
     *
     * @param phone User phone. (required)
     * @param userSchema  (required)
     * @return Successful response to user change. (status code 200)
     *         or User input error. (status code 400)
     *         or The user with the specified phone number was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "changeUserProfile",
        summary = "Change fields in the user entity.",
        description = "Change fields in the user entity by its profile.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to user change.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The user with the specified phone number was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/profile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserSchema> changeUserProfile(
        @NotNull @Parameter(name = "phone", description = "User phone.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "phone", required = true) String phone,
        @Parameter(name = "UserSchema", description = "", required = true) @Valid @RequestBody UserSchema userSchema
    );


    /**
     * POST /users/admin/admins : Create admin
     * Create a user - an admin.
     *
     * @param userSchema  (required)
     * @return Successful response to create an admin. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createAdmin",
        summary = "Create admin",
        description = "Create a user - an admin.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to create an admin.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/admin/admins",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> createAdmin(
        @Parameter(name = "UserSchema", description = "", required = true) @Valid @RequestBody UserSchema userSchema
    );


    /**
     * POST /users/guest : Create user
     * Create a user - a guest, without items attached to him.
     *
     * @param guestSchema  (required)
     * @return Successful response to create a guest. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createGuest",
        summary = "Create user",
        description = "Create a user - a guest, without items attached to him.",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to create a guest.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/guest",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> createGuest(
        @Parameter(name = "GuestSchema", description = "", required = true) @Valid @RequestBody GuestSchema guestSchema
    );


    /**
     * POST /users/admin/moderators : Create a moderator
     * Create a user - moderator.
     *
     * @param userSchema  (required)
     * @return Successful response to create a moderator. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createModerator",
        summary = "Create a moderator",
        description = "Create a user - moderator.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to create a moderator.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/admin/moderators",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> createModerator(
        @Parameter(name = "UserSchema", description = "", required = true) @Valid @RequestBody UserSchema userSchema
    );


    /**
     * POST /users/owner : Create a landlord user.
     * Create a user who has rented out at least one item.
     *
     * @param ownerSchema  (required)
     * @return Successful response to the establishment of the landlord. (status code 200)
     *         or User input error. (status code 400)
     *         or Unecpected error. (status code 500)
     */
    @Operation(
        operationId = "createOwner",
        summary = "Create a landlord user.",
        description = "Create a user who has rented out at least one item.",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to the establishment of the landlord.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unecpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/owner",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> createOwner(
        @Parameter(name = "OwnerSchema", description = "", required = true) @Valid @RequestBody OwnerSchema ownerSchema
    );


    /**
     * POST /users/renter : Create tenant user.
     * Create a user who has rented at least one item.
     *
     * @param renterSchema  (required)
     * @return Successful response to tenant creation. (status code 200)
     *         or User input error. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "createRenter",
        summary = "Create tenant user.",
        description = "Create a user who has rented at least one item.",
        tags = { "Public API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to tenant creation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/renter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> createRenter(
        @Parameter(name = "RenterSchema", description = "", required = true) @Valid @RequestBody RenterSchema renterSchema
    );


    /**
     * DELETE /users/{userId} : Delete user.
     * Completely delete a user from the application (including from the database).
     *
     * @param userId User entity ID. (required)
     * @return A successful response to deleting a user by id. (status code 200)
     *         or User input error (status code 400)
     *         or The user with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user.",
        description = "Completely delete a user from the application (including from the database).",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response to deleting a user by id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The user with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<Boolean> deleteUser(
        @Parameter(name = "userId", description = "User entity ID.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * GET /users : Get all users.
     * Get all users in db.
     *
     * @return Successful response to a request to get all users. (status code 200)
     *         or User input error. (status code 400)
     *         or User with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all users.",
        description = "Get all users in db.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to a request to get all users.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponseSchema.class)))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "User with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserResponseSchema>> getAllUsers(
        
    );


    /**
     * GET /users/{userId} : View the description of the user entity.
     * View the description of the user entity by its identifier.
     *
     * @param userId User entity ID. (required)
     * @return Successful response to user search. (status code 200)
     *         or User input error. (status code 400)
     *         or The user with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "getUserById",
        summary = "View the description of the user entity.",
        description = "View the description of the user entity by its identifier.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to user search.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The user with the specified ID was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}",
        produces = { "application/json" }
    )
    ResponseEntity<UserResponseSchema> getUserById(
        @Parameter(name = "userId", description = "User entity ID.", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * GET /users/profile : View the description of the user entity.
     * View the description of the user entity by its phone number.
     *
     * @param phone User phone. (required)
     * @return Successful response to user search. (status code 200)
     *         or User input error. (status code 400)
     *         or The user with the specified phone number was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @Operation(
        operationId = "getUserProfile",
        summary = "View the description of the user entity.",
        description = "View the description of the user entity by its phone number.",
        tags = { "System API" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response to user search.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "User input error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The user with the specified phone number was not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BaseResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/profile",
        produces = { "application/json" }
    )
    ResponseEntity<UserSchema> getUserProfile(
        @NotNull @Parameter(name = "phone", description = "User phone.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "phone", required = true) String phone
    );

}
