openapi: 3.0.3
info:
  title: 'SHARY-CORE REST API'
  description: SHARY REST API applications are a convenient service for exchanging things.
  version: 1.0.0
  contact:
    email: sharying@yandex.ru
    name: Alexander
servers:
  - description: Shary Developer Server
    url: http://188.120.236.252:8083/api/v1
  - description: Shary Product Server
    url: http://188.120.236.252:8082/api/v1

tags:
  - name: Public API
    description: Methods available to everyone
  - name: System API
    description: Methods available only to the administrator
  - name: User API
    description: Methods available only to a specific user.
security:
  - ApiKeyAuth: [ ]

paths:
  /categories:
    post:
      tags:
        - System API
      operationId: createCategory
      summary: Create a new item category.
      description: Create a new category of items (for example, electronics).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySchema'
      responses:
        '200':
          description: Successful response to the creation of a new category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseSchema'
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllCategories
      summary: Get categories.
      description: Get all categories in our service.
      responses:
        '200':
          description: Successful response to get all categories request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateCategory
      summary: Update category.
      description: Change category name or category image.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySchema'
      responses:
        '200':
          description: Successful response to a category change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Category entity ID (category).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getCategoryById
      summary: Get category.
      description: Get category by id.
      responses:
        '200':
          description: Successful response to get category by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteCategory
      summary: Delete category.
      description: Completely delete a category from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a category.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories:
    post:
      tags:
        - System API
      operationId: createSubcategory
      summary: Create a new item subcategory.
      description: Create a new subcategory of items (for example, laptops).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategorySchema'
      responses:
        '200':
          description: Successful response to the creation of a new subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategoryResponseSchema'
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateSubcategory
      summary: Update subcategory.
      description: Change subcategory name or image.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategorySchema'
      responses:
        '200':
          description: Successful response to a subcategory change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategoryResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllSubcategories
      summary: Get subcategories.
      description: Get all subcategories in our service.
      responses:
        '200':
          description: Successful response to get all subcategories request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategoriesListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories/{subcategoryId}:
    parameters:
      - name: subcategoryId
        in: path
        required: true
        description: Subcategory entity ID (subcategory).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getSubcategoryById
      summary: Get subcategory.
      description: Get subcategory by id.
      responses:
        '200':
          description: Successful response to get subcategory by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategoryResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteSubcategory
      summary: Delete subcategory.
      description: Completely delete a subcategory from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a subcategory.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Category entity ID (category).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllSubcategoriesForCategory
      summary: Get all subcategories for category.
      description: Get all subcategories for category in our service.
      responses:
        '200':
          description: Successful response to a request to get all subcategories for a category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategoriesListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items:
    post:
      tags:
        - System API
      operationId: createItem
      summary: To rent.
      description: Create the entity of the rented item.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemSchema'
      responses:
        '200':
          description: A successful response to the creation of a new item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllItems
      summary: Get all items.
      description: Get all items in our service.
      responses:
        '200':
          description: Successful response to get all items request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateItem
      summary: Update item.
      description: Update data about the item (for example, whether it is rented).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemSchema'
      responses:
        '200':
          description: Successful response to update items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getItemById
      summary: Get an item.
      description: Get an item by its id.
      responses:
        '200':
          description: Successful response to finding a item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    post:
      tags:
        - Public API
      operationId: createRentedItem
      summary: To rent.
      description: Create a rented item (attach it to a tenant).
      parameters:
        - name: ownerId
          in: query
          required: true
          description: ID of the Owner entity that rented the item.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A successful response to the creation of a rented item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item or owner with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    put:
      tags:
        - Public API
      operationId: returnRentedItem
      summary: Return item.
      description: Return the thing rented (untie it from the tenant).
      parameters:
        - name: ownerId
          in: query
          required: true
          description: ID of the Owner entity that rented the item.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response to the return of the rented item.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item or owner with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteItem
      summary: Delete item.
      description: Completely delete a item from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a item by id.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Id of the category for which we get all items.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllItemsForCategory
      summary: Get all items for category.
      description: Get all items for category in our service.
      responses:
        '200':
          description: Successful response to a request to get all items for a category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/subcategories/{subcategoryId}:
    parameters:
      - name: subcategoryId
        in: path
        required: true
        description: Id of the subcategory for which we get all items.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllItemsForSubcategory
      summary: Get all items for subcategory.
      description: Get all items for subcategory in our service.
      responses:
        '200':
          description: Successful response to a request to get all items for a subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users:
    post:
      tags:
        - Public API
      operationId: createGuest
      summary: Create user
      description: Create a user - a guest, without items attached to him.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestSchema'
      responses:
        '200':
          description: Successful response to create a guest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - System API
      operationId: getAllUsers
      summary: Get all users.
      description: Get all users in db.
      responses:
        '200':
          description: Successful response to a request to get all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: User with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/renter:
    post:
      tags:
        - Public API
      operationId: createRenter
      summary: Create tenant user.
      description: Create a user who has rented at least one item.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenterSchema'
      responses:
        '200':
          description: Successful response to tenant creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/owner:
    post:
      tags:
        - Public API
      operationId: createOwner
      summary: Create a landlord user.
      description: Create a user who has rented out at least one item.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerSchema'
      responses:
        '200':
          description: Successful response to the establishment of the landlord.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unecpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User entity ID.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getUserById
      summary: View the description of the user entity.
      description: View the description of the user entity by its identifier.
      responses:
        '200':
          description: Successful response to user search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: changeUserById
      summary: Change fields in the user entity.
      description: Change fields in the user entity by its ID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful response to user change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteUser
      summary: Delete user.
      description: Completely delete a user from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a user by id.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders:
    get:
      tags:
        - Public API
      operationId: getAllOrders
      summary: Get orders.
      description: Get all orders in our service.
      responses:
        '200':
          description: Successful response to get all orders request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order entity ID (order).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrderById
      summary: Get order.
      description: Get order by id.
      responses:
        '200':
          description: Successful response to get order by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateOrder
      summary: Update order.
      description: Update order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
      responses:
        '200':
          description: Successful response to a order change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteOrder
      summary: Delete order.
      description: Completely delete a order from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a order.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/amount:
    get:
      tags:
        - Public API
      operationId: getOrdersAmount
      summary: Get orders amount.
      description: Get all orders amount in our service.
      responses:
        '200':
          description: Successful response to get all orders amount request.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User entity ID (user).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrdersByUserId
      summary: Get user orders.
      description: Get user orders by user id.
      responses:
        '200':
          description: Successful response to get user orders by user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrderByItemId
      summary: Get order by item id.
      description: Get order by item id.
      responses:
        '200':
          description: Successful response to get order by item id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
  /docx/individual:
    post:
      tags:
        - Documents API
      operationId: postIndividualDocx
      summary: Creates an individual contract.
      description: Creates an individual contract with parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequestSchema'
      responses:
        '200':
          description: Successful response to create contract.
          content:
            text/plain:
              schema:
                type: string
                format: uri
        '400':
          description: Parameters input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: SimpleToken
  schemas:

    # lists:

    CategoriesListSchema:
      allOf:
        - $ref: 'base.yml#/components/schemas/BaseResponse'
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseSchema'

    SubcategoriesListSchema:
      allOf:
        - $ref: 'base.yml#/components/schemas/BaseResponse'
      type: object
      required:
        - subcategories
      properties:
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryResponseSchema'

    UsersListSchema:
      allOf:
        - $ref: 'base.yml#/components/schemas/BaseResponse'
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseSchema'

    ItemsListSchema:
      allOf:
        - $ref: 'base.yml#/components/schemas/BaseResponse'
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemResponseSchema'

    OrdersListSchema:
      allOf:
        - $ref: 'base.yml#/components/schemas/BaseResponse'
      type: object
      required:
        - orders
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderSchema'

    # models:

    UserSchema:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        secondName:
          type: string
        inn:
          type: string
        birthday:
          type: string
          format: 'data'
        passportNumber:
          type: string
        passportSeries:
          type: string
        phoneNumber:
          type: string
        registrationAddress:
          type: string
        residenceAddress:
          type: string
        itemsForRent:
          type: array
          items:
            $ref: '#/components/schemas/ItemsListSchema'
        itemsRented:
          type: array
          items:
            $ref: '#/components/schemas/ItemsListSchema'
        isValid:
          type: boolean
        owner:
          type: boolean
        renter:
          type: boolean
        telegramId:
          type: integer
          format: int64
        chatId:
          type: integer
          format: int64

    UserResponseSchema:
      type: object
      required:
        - id
        - email
        - firstName
        - secondName
        - givenName
        - isOwner
        - isRenter
        - telegramId
        - chatId
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        secondName:
          type: string
        givenName:
          type: string
        isOwner:
          type: boolean
          default: false
        isRenter:
          type: boolean
          default: false
        telegramId:
          type: integer
          format: int64
        chatId:
          type: integer
          format: int64

    GuestSchema:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email

    RenterSchema:
      type: object
      required:
        - id
        - email
        - firstName
        - secondName
        - givenName
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        secondName:
          type: string
        givenName:
          type: string
        telegramId:
          type: integer
          format: int64
        chatId:
          type: integer
          format: int64

    OwnerSchema:
      type: object
      required:
        - id
        - email
        - firstName
        - secondName
        - inn
        - birthday
        - passportNumber
        - passportSeries
        - phoneNumber
        - registrationAddress
        - residenceAddress
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        secondName:
          type: string
        inn:
          type: string
        birthday:
          type: string
          format: 'date'
        passportNumber:
          type: string
        passportSeries:
          type: string
        phoneNumber:
          type: string
        registrationAddress:
          type: string
        residenceAddress:
          type: string
        telegramId:
          type: integer
          format: int64
        chatId:
          type: integer
          format: int64

    CategorySchema:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
          format: uri

    CategoryResponseSchema:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
          format: uri

    ItemSchema:
      type: object
      required:
        - id
        - name
        - serialNumber
        - photo
        - video
        - description
        - verified
        - onLease
        - category
        - subcategory
        - price
        - owner

      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        serialNumber:
          type: string
        photo:
          type: string
          format: url
        video:
          type: string
          format: url
        description:
          type: string
        verified:
          type: boolean
          default: true
        onLease:
          type: boolean
          default: false
        category:
          type: integer
          format: int
        subcategory:
          type: integer
          format: int
        price:
          type: string
        renter:
          type: integer
          format: int64
        owner:
          type: integer
          format: int64
        characteristics:
          type: object
          items:
            $ref: '#/components/schemas/CharacteristicsSchema'

    ItemResponseSchema:
      type: object
      required:
        - id
        - name
        - serialNumber
        - photo
        - video
        - description
        - verified
        - onLease
        - category
        - subcategory
        - price
        - owner
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        serialNumber:
          type: string
        photo:
          type: string
          format: url
        video:
          type: string
          format: url
        description:
          type: string
        verified:
          type: boolean
          default: true
        onLease:
          type: boolean
          default: false
        category:
          type: integer
          format: int
        subcategory:
          type: integer
          format: int
        price:
          type: string
        renter:
          type: integer
          format: int64
        owner:
          type: integer
          format: int64
        characteristics:
          type: object
          items:
            $ref: '#/components/schemas/CharacteristicsSchema'

    SubcategorySchema:
      type: object
      required:
        - name
        - category
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          type: integer
          format: int64
        image:
          type: string
          format: uri

    SubcategoryResponseSchema:
      type: object
      required:
        - name
        - category
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          type: integer
          format: int64
        image:
          type: string
          format: uri


    OrderSchema:
      type: object
      required:
        - status
        - itemId
        - ownerId
        - renterId
        - creation
        - isActive
        - items
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
        itemId:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        renterId:
          type: integer
          format: int64
        creation:
          type: string
          format: 'date-time'
        updated:
          type: string
          format: 'date-time'
        rentEnd:
          type: string
          format: 'date-time'
        isActive:
          type: boolean
          default: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemsListSchema'

    CharacteristicsSchema:
      type: object
      properties:
        brand:
          type: string
        color:
          type: string
        operatingSystem:
          type: string
        cpu:
          type: string
        ram:
          type: string
        videoCard:
          type: string
        memory:
          type: string
        memoryType:
          type: string
        batteryCapacity:
          type: string
        weight:
          type: string

    IndividualRequestSchema:
      type: object
      properties:
        NOMER_DOGOVORA:
          type: string
          example: 5345234523
        FAMILIYA:
          type: string
          example: Сидоров
        IMYA:
          type: string
          example: Игорь
        OTCHESTVO:
          type: string
          example: Петрович
        FAMILIYA_I_O:
          type: string
          example: Сидоров И.П.
        GRAZHDANSTVO:
          type: string
          example: Россия
        NOMER_PASPORTA:
          type: string
          example: 93 27 128433
        D_V_PASPORTA:
          type: string
          example: 20.11.2012
        OTDEL_PASPORTA:
          type: string
          example: ОТДЕЛЕНИЕМ УФМС
        NAME_PRODUCT:
          type: string
          example: Самокат
        SET:
          type: string
          example: Зарядное устройство, Чехол
        DATE_END:
          type: string
          example: 20.11.2023
        PRICE_1_DAY:
          type: string
          example: 9000
        PRICE_FINAL:
          type: string
          example: 90000
        TELEFON_KLIENTA:
          type: string
          example: +79999999999
        ADRES_KLIENTA:
          type: string
          example: г. Москва
        E_MAIL_KLIENTA:
          type: string
          example: example@example.example
