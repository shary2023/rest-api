openapi: 3.0.3
info:
  title: 'SHARY-CORE REST API'
  description: SHARY REST API applications are a convenient service for exchanging things.
  version: 1.0.0
  contact:
    email: sharying@yandex.ru
    name: Alexander
servers:
  - description: Shary Developer Server
    url: http://188.120.236.252:8083/api/v1
  - description: Shary Product Server
    url: http://188.120.236.252:8082/api/v1

tags:
  - name: Public API
    description: Methods available to everyone
  - name: System API
    description: Methods available only to the administrator
  - name: User API
    description: Methods available only to a specific user.
security:
  - ApiKeyAuth: [ ]

paths:
  /categories:
    post:
      tags:
        - System API
      operationId: createCategory
      summary: Create a new item category.
      description: Create a new category of items (for example, electronics).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySchema'
      responses:
        '200':
          description: Successful response to the creation of a new category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySchema'
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllCategories
      summary: Get categories.
      description: Get all categories in our service.
      responses:
        '200':
          description: Successful response to get all categories request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateCategory
      summary: Update category.
      description: Change category name or category image.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySchema'
      responses:
        '200':
          description: Successful response to a category change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Category entity ID (category).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getCategoryById
      summary: Get category.
      description: Get category by id.
      responses:
        '200':
          description: Successful response to get category by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteCategory
      summary: Delete category.
      description: Completely delete a category from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a category.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories:
    post:
      tags:
        - System API
      operationId: createSubcategory
      summary: Create a new item subcategory.
      description: Create a new subcategory of items (for example, laptops).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategorySchema'
      responses:
        '200':
          description: Successful response to the creation of a new subcategory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategorySchema'
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateSubcategory
      summary: Update subcategory.
      description: Change subcategory name or image.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubcategorySchema'
      responses:
        '200':
          description: Successful response to a subcategory change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllSubcategories
      summary: Get subcategories.
      description: Get all subcategories in our service.
      responses:
        '200':
          description: Successful response to get all subcategories request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubcategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories/{subcategoryId}:
    parameters:
      - name: subcategoryId
        in: path
        required: true
        description: Subcategory entity ID (subcategory).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getSubcategoryById
      summary: Get subcategory.
      description: Get subcategory by id.
      responses:
        '200':
          description: Successful response to get subcategory by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubcategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteSubcategory
      summary: Delete subcategory.
      description: Completely delete a subcategory from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a subcategory.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /subcategories/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Category entity ID (category).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllSubcategoriesForCategory
      summary: Get all subcategories for category.
      description: Get all subcategories for category in our service.
      responses:
        '200':
          description: Successful response to a request to get all subcategories for a category.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubcategorySchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items:
    post:
      tags:
        - System API
      operationId: createItem
      summary: To rent.
      description: Create the entity of the rented item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemSchema'
      responses:
        '200':
          description: A successful response to the creation of a new item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    get:
      tags:
        - Public API
      operationId: getAllItems
      summary: Get all items.
      description: Get all items in our service.
      responses:
        '200':
          description: Successful response to get all items request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateItem
      summary: Update item.
      description: Update data about the item (for example, whether it is rented).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemSchema'
      responses:
        '200':
          description: Successful response to update items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/{itemId}/rent:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64
    post:
      tags:
        - Public API
      operationId: rentAnItem
      summary: Rent an item.
      description: Rent an item (bind it to the tenant).
      parameters:
        - name: renterId
          in: query
          required: true
          description: ID of the Renter entity that rented the item.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response to the return of the rented item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item or owner with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/{itemId}/rent/out:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64
    post:
      tags:
        - Public API
      operationId: returnRentedItem
      summary: Return item.
      description: Return the thing rented (untie it from the tenant).
      responses:
        '200':
          description: Successful response to the return of the rented item.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item or owner with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getItemById
      summary: Get an item.
      description: Get an item by its id.
      responses:
        '200':
          description: Successful response to finding a item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteItem
      summary: Delete item.
      description: Completely delete a item from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a item by id.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: Id of the category for which we get all items.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllItemsForCategory
      summary: Get all items for category.
      description: Get all items for category in our service.
      responses:
        '200':
          description: Successful response to a request to get all items for a category.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The category with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/subcategories/{subcategoryId}:
    parameters:
      - name: subcategoryId
        in: path
        required: true
        description: Id of the subcategory for which we get all items.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Public API
      operationId: getAllItemsForSubcategory
      summary: Get all items for subcategory.
      description: Get all items for subcategory in our service.
      responses:
        '200':
          description: Successful response to a request to get all items for a subcategory.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The subcategory with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/users:
    parameters:
      - name: ownerPhone
        in: query
        required: true
        description: Phone of the user(owner) for which we get all items.
        schema:
          type: string

    get:
      tags:
        - System API
      operationId: getItemsRentedForUserByUserPhone
      summary: Get items rented for user.
      description: Get all items rented for user(owner) by user phone in our service.
      responses:
        '200':
          description: Successful response to a request to get all items for rent for a user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified phone was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /items/users/rent:
    parameters:
      - name: renterPhone
        in: query
        required: true
        description: Phone of the user(renter) for which we get all items.
        schema:
          type: string

    get:
      tags:
        - System API
      operationId: getRentedItemsForUserByUserPhone
      summary: Get rent items for user.
      description: Get all rented items for user(renter) by user phone in our service.
      responses:
        '200':
          description: Successful response to a request to get all rented items for a user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified phone was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users:
    get:
      tags:
        - System API
      operationId: getAllUsers
      summary: Get all users.
      description: Get all users in db.
      responses:
        '200':
          description: Successful response to a request to get all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: User with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/profile:
    get:
      tags:
        - System API
      operationId: getUserProfile
      summary: View the description of the user entity.
      description: View the description of the user entity by its phone number.
      parameters:
        - name: phone
          in: query
          required: true
          description: User phone.
          schema:
            type: string
            format: 'phone'
      responses:
        '200':
          description: Successful response to user search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified phone number was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: changeUserProfile
      summary: Change fields in the user entity.
      description: Change fields in the user entity by its profile.
      parameters:
        - name: phone
          in: query
          required: true
          description: User phone.
          schema:
            type: string
            format: 'phone'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
      responses:
        '200':
          description: Successful response to user change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified phone number was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/guest:
    post:
      tags:
        - Public API
      operationId: createGuest
      summary: Create user
      description: Create a user - a guest, without items attached to him.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestSchema'
      responses:
        '200':
          description: Successful response to create a guest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/renter:
    post:
      tags:
        - Public API
      operationId: createRenter
      summary: Create tenant user.
      description: Create a user who has rented at least one item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenterSchema'
      responses:
        '200':
          description: Successful response to tenant creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/owner:
    post:
      tags:
        - Public API
      operationId: createOwner
      summary: Create a landlord user.
      description: Create a user who has rented out at least one item.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerSchema'
      responses:
        '200':
          description: Successful response to the establishment of the landlord.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unecpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/admin/admins:
    post:
      tags:
        - System API
      operationId: createAdmin
      summary: Create admin
      description: Create a user - an admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
      responses:
        '200':
          description: Successful response to create an admin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/admin/moderators:
    post:
      tags:
        - System API
      operationId: createModerator
      summary: Create a moderator
      description: Create a user - moderator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
      responses:
        '200':
          description: Successful response to create a moderator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User entity ID.
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getUserById
      summary: View the description of the user entity.
      description: View the description of the user entity by its identifier.
      responses:
        '200':
          description: Successful response to user search.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: changeUserById
      summary: Change fields in the user entity.
      description: Change fields in the user entity by its ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
      responses:
        '200':
          description: Successful response to user change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteUser
      summary: Delete user.
      description: Completely delete a user from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a user by id.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /roles:
    get:
      tags:
        - System API
      operationId: getAllRoles
      summary: Get all roles.
      description: Get all roles in db.
      responses:
        '200':
          description: Successful response to a request to get all roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: Role with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    post:
      tags:
        - System API
      operationId: createRole
      summary: Create role.
      description: Create role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSchema'
      responses:
        '200':
          description: Successful response to create a role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /roles/{roleId}:
    parameters:
      - name: roleId
        in: path
        required: true
        description: Role entity ID (role).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getRoleById
      summary: Get role.
      description: Get role by id.
      responses:
        '200':
          description: Successful response to get role by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The role with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders:
    get:
      tags:
        - Public API
      operationId: getAllOrders
      summary: Get orders.
      description: Get all orders in our service.
      responses:
        '200':
          description: Successful response to get all orders request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order entity ID (order).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrderById
      summary: Get order.
      description: Get order by id.
      responses:
        '200':
          description: Successful response to get order by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    patch:
      tags:
        - System API
      operationId: updateOrder
      summary: Update order.
      description: Update order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSchema'
      responses:
        '200':
          description: Successful response to a order change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

    delete:
      tags:
        - System API
      operationId: deleteOrder
      summary: Delete order.
      description: Completely delete a order from the application (including from the database).
      responses:
        '200':
          description: A successful response to deleting a order.
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The order with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/amount:
    get:
      tags:
        - Public API
      operationId: getOrdersAmount
      summary: Get orders amount.
      description: Get all orders amount in our service.
      responses:
        '200':
          description: Successful response to get all orders amount request.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User entity ID (user).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrdersByUserId
      summary: Get user orders.
      description: Get user orders by user id.
      responses:
        '200':
          description: Successful response to get user orders by user id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The user with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

  /orders/items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        description: Item entity ID (item).
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getOrderByItemId
      summary: Get order by item id.
      description: Get order by item id.
      responses:
        '200':
          description: Successful response to get order by item id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSchema'
        '400':
          description: User input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: The item with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'



  # Insurance Controller

  /renters/items/leases:
    parameters:
      - name: limit
        in: query
        required: true
        description: The number of insurance approvals received
        schema:
          type: integer
          format: int32
      - name: after
        in: query
        required: false
        description: cursor to the next page
        schema:
          type: integer
          format: int32
      - name: before
        in: query
        required: false
        description: cursor to the previous page
        schema:
          type: integer
          format: int32

    get:
      tags:
        - System API
      operationId: getLeases
      summary: Get a list of registered insurances
      description: Get a list of registered insurances
      responses:
        '200':
          description: Successful response to get a list of registered insurance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceLeasesResponse'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceLeasesResponse'

  /renters/items/leases/{lease_id}/document:
    parameters:
      - name: lease_id
        required: true
        in: path
        description: Lease entity ID
        schema:
          type: string
      - name: polices_id
        required: true
        in: query
        description: Police entity ID
        schema:
          type: integer
          format: int64

    get:
      tags:
        - System API
      operationId: getPdfPolices
      summary: Get insurance policy in pdf format
      description: Get insurance policy in pdf format
      responses:
        '200':
          description: Successful response to get a policy insurance in pdf format
          content:
            application/pdf:
              schema:
                type: string
                format: byte

  /renters/items/leases/{lease_id}:
    parameters:
      - name: lease_id
        in: path
        required: true
        description: Insurance lease by id.
        schema:
          type: string
      - name: completeness
        in: query
        description: Get the entity of insurance in basic form or in full
        schema:
          type: string
          default: basic
    get:
      tags:
        - System API
      operationId: getLease
      summary: Get Insurance lease by id.
      description: Get Insurance lease by id.
      responses:
        '200':
          description: Successful response to get a insurance  by ID
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InsuranceItemResponseSchema'     # basic
                  - $ref: '#/components/schemas/InsuranceCreationResponseSchema'  # full
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
  /renters/lease:
    post:
      tags:
        - System API
      operationId: createLease
      summary: Create an insurance for the item
      description: Create an insurance for the item

      requestBody:
        description: Create an insurance for the item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsuranceCreationRequestSchema'
      responses:
        '201':
          description: Successful response to an insurance request created as part of a lease
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceCreationResponseSchema'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'


  /renters/items/leases/{lease_id}/submit:
    parameters:
      - name: lease_id
        in: path
        required: true
        description: Insurance lease by id
        schema:
          type: string
    post:
      tags:
        - System API
      operationId: submitLease
      summary: Approve the required for insurance
      description: Approve the required for insurance

      responses:
        '201':
          description: Successful response to approve the lease insurance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceCreationResponseSchema'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'


  /renters/items/leases/{lease_id}/cancel:
    parameters:
      - name: lease_id
        in: path
        required: true
        description: Insurance lease by id
        schema:
          type: string
    post:
      tags:
        - System API
      operationId: cancelLease
      summary: Cancel insurance by lease ID
      description: Cancel insurance by lease ID
      responses:
        '201':
          description: Successful response of cancel insurance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceLeaseCancelledSchema'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'


  /renters/items/leases/{update_lease_id}:
    parameters:
      - name: update_lease_id
        in: path
        required: true
        description: Insurance lease by id
        schema:
          type: string
    put:
      tags:
        - System API
      operationId: updateLease
      summary: Update insurance by lease ID
      description: Update insurance by lease ID

      requestBody:
        description: Updating the insurance
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsuranceCreationRequestSchema'
      responses:
        '201':
          description: Successful insurance update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsuranceCreationResponseSchema'
        '403':
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'


  # Document Controller

  /docx/individual:
    post:
      tags:
        - System Api
      operationId: postIndividualDocx
      summary: Creates an individual contract.
      description: Creates an individual contract with parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequestSchema'
      responses:
        '200':
          description: Successful response to create contract.
          content:
            text/plain:
              schema:
                type: string
                format: uri
        '400':
          description: Parameters input error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'
        '500':
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: 'base.yml#/components/schemas/BaseResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: SimpleToken
  schemas:

    # models:
    # UserProfileSchema:
    #   allOf:
    #     - $ref: 'regular.yml#/components/schemas/PhoneNumberRegularSchema'
    #   type: object
    #   required:
    #     - phoneNumber
    #   properties:
    #     phoneNumber:
    #       type: string
    #       minLength: 5
    #       maxLength: 15

    RoleSchema:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 2
          maxLength: 15

    UserSchema:
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      required:
        - phoneNumber
        - isDishonestClient
      properties:
        id:
          type: integer
          format: int64
        phoneNumber:
          type: string
          minLength: 5
          maxLength: 15
        email:
          type: string
          format: 'email'
        password:
          type: string
          format: password
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        secondName:
          type: string
          minLength: 2
          maxLength: 50
        givenName:
          type: string
          maxLength: 50
        birthday:
          type: string
          format: 'data'
        registrationAddress:
          type: string
        residenceAddress:
          type: string
        isAddressesMatch:
          type: boolean
          default: true
        isAgreeWithPublicOffer:
          type: boolean
          default: false
        isAgreeWithFullDeposit:
          type: boolean
          default: false
        isDishonestClient:
          type: boolean
          default: false
        isValid:
          type: boolean
        owner:
          type: boolean
        renter:
          type: boolean
        telegramId:
          type: integer
          format: int64
          minimum: 1
        chatId:
          type: integer
          format: int64
          minimum: 1

    UserResponseSchema:
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      required:
        - id
        - email
        - firstName
        - secondName
        - givenName
        - owner
        - renter
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        secondName:
          type: string
          minLength: 2
          maxLength: 50
        givenName:
          type: string
          maxLength: 50
        owner:
          type: boolean
          default: false
        renter:
          type: boolean
          default: false
        phoneNumber:
          type: string
          minLength: 5
          maxLength: 15
        isAgreeWithFullDeposit:
          type: boolean
          default: false
        isDishonestClient:
          type: boolean
          default: false
        telegramId:
          type: integer
          format: int64
          minimum: 1
        chatId:
          type: integer
          format: int64
          minimum: 1

    GuestSchema:
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      required:
        - phoneNumber
        - password
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        email:
          type: string
          format: 'email'
        phoneNumber:
          type: string
          minLength: 5
          maxLength: 15
        password:
          type: string
          format: password

    RenterSchema:
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      required:
        - id
        - email
        - phoneNumber
        - password
        - firstName
        - secondName
        - givenName
        - isAgreeWithPublicOffer
        - isDishonestClient
      properties:
        id:
          type: integer
          format: int64
        password:
          type: string
          format: password
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        secondName:
          type: string
          minLength: 2
          maxLength: 50
        givenName:
          type: string
          maxLength: 50
        phoneNumber:
          type: string
          minLength: 5
          maxLength: 15
        isAgreeWithPublicOffer:
          type: boolean
          default: false
        isAgreeWithFullDeposit:
          type: boolean
          default: false
        isDishonestClient:
          type: boolean
          default: false
        telegramId:
          type: integer
          format: int64
          minimum: 1
        chatId:
          type: integer
          format: int64
          minimum: 1

    OwnerSchema:
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      required:
        - id
        - email
        - password
        - firstName
        - secondName
        - inn
        - birthday
        - passportNumber
        - passportSeries
        - phoneNumber
        - registrationAddress
        - residenceAddress
        - isAgreeWithPublicOffer
      properties:
        id:
          type: integer
          format: int64
        password:
          type: string
          format: password
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        secondName:
          type: string
          minLength: 2
          maxLength: 50
        givenName:
          type: string
          maxLength: 50
        birthday:
          type: string
          format: 'date'
        phoneNumber:
          type: string
          minLength: 5
          maxLength: 15
        registrationAddress:
          type: string
        residenceAddress:
          type: string
        isAddressesMatch:
          type: boolean
          default: true
        isAgreeWithPublicOffer:
          type: boolean
          default: false
        telegramId:
          type: integer
          format: int64
          minimum: 1
        chatId:
          type: integer
          format: int64
          minimum: 1

    CategorySchema:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
          format: uri

    #    CategoryResponseSchema:
    #      type: object
    #      required:
    #        - name
    #      properties:
    #        id:
    #          type: integer
    #          format: int64
    #        name:
    #          type: string
    #        image:
    #          type: string
    #          format: uri

    ItemSchema:
      type: object
      required:
        - name
        - photo
        - video
        - verified
        - onLease
        - category
        - subcategory
        - price
        - ownerPhone

      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        serialNumber:
          type: string
        photo:
          type: string
          format: uri
        video:
          type: string
          format: uri
        description:
          type: string
        verified:
          type: boolean
          default: false
        isExtendLease:
          type: boolean
          default: false
        category:
          $ref: '#/components/schemas/CategorySchema'
        subcategory:
          $ref: '#/components/schemas/SubcategorySchema'
        price:
          type: string
        renterPhone:
          type: string
        ownerPhone:
          type: string
        characteristics:
          $ref: '#/components/schemas/CharacteristicsSchema'
        data:
          $ref: '#/components/schemas/ItemDataForRentSchema'

    #    ItemResponseSchema:
    #      type: object
    #      required:
    #        - id
    #      properties:
    #        id:
    #          type: integer
    #          format: int64
    #        name:
    #          type: string
    #        serialNumber:
    #          type: string
    #        photo:
    #          type: string
    #          format: uri
    #        video:
    #          type: string
    #          format: uri
    #        description:
    #          type: string
    #        verified:
    #          type: boolean
    #          default: false
    #        onLease:
    #          type: boolean
    #          default: false
    #        category:
    #          $ref: '#/components/schemas/CategorySchema'
    #        subcategory:
    #          $ref: '#/components/schemas/SubcategorySchema'
    #        price:
    #          type: string
    #        renter:
    #          $ref: '#/components/schemas/RenterSchema'
    #        owner:
    #          $ref: '#/components/schemas/OwnerSchema'
    #        # order:
    #        #   $ref: '#/components/schemas/OrderSchema'
    #        characteristics:
    #          $ref: '#/components/schemas/CharacteristicsSchema'

    SubcategorySchema:
      type: object
      required:
        - name
        - category
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          $ref: '#/components/schemas/CategorySchema'
        image:
          type: string
          format: uri

    #    SubcategoryResponseSchema:
    #      type: object
    #      required:
    #        - name
    #        - category
    #      properties:
    #        id:
    #          type: integer
    #          format: int64
    #        name:
    #          type: string
    #        category:
    #          $ref: '#/components/schemas/CategorySchema'
    #        image:
    #          type: string
    #          format: uri

    OrderSchema:
      type: object
      required:
        - status
        - items
        - renterPhone
        - creation
        - active
        - isAgreeWithFullDeposit
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
        fullPrice:
          type: string
        rentStart:
          type: string
          format: 'date-time'
        isRenterNew:
          type: boolean
          default: false
        isPrepaymentGet:
          type: boolean
          default: false
        isNeedCourier:
          type: boolean
          default: false
        renterPhone:
          type: string
          minLength: 5
          maxLength: 15
        creation:
          type: string
          format: 'date-time'
        updated:
          type: string
          format: 'date-time'
        rentEnd:
          type: string
          format: 'date-time'
        active:
          type: boolean
          default: true
        isAgreeWithFullDeposit:
          type: boolean
          default: false
        delivery:
          $ref: '#/components/schemas/DeliverySchema'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemSchema'

    CharacteristicsSchema:
      type: object
      properties:
        brand:
          type: string
        color:
          type: string
        operatingSystem:
          type: string
        cpu:
          type: string
        ram:
          type: string
        videoCard:
          type: string
        memory:
          type: string
        memoryType:
          type: string
        batteryCapacity:
          type: string
        weight:
          type: string

    DeliverySchema:
      type: object
      properties:
        address:
          type: string
        deliveryData:
          $ref: '#/components/schemas/DeliveryDataSchema'
        dataTime:
          type: string
          format: 'date-time'
        isPickUp:
          type: boolean
          default: false

    DeliveryDataSchema:
      type: object
      properties:
        addressFrom:
          type: string
        addressTo:
          type: string
        openingHours:
          type: string
        phone:
          type: string

    ItemCompleteSchema:
      type: object
      properties:
        complication:
          type: string

    ItemDataForRentSchema:
      type: object
      properties:
        onLease:
          type: boolean
          default: false
        isBooked:
          type: boolean
          default: false
        isNeedInsurance:
          type: boolean
          default: false
        onLeaseDate:
          type: string
          format: 'date-time'
        isBookedDate:
          type: string
          format: 'date-time'
        complete:
          $ref: '#/components/schemas/ItemCompleteSchema'
        state:
          $ref: '#/components/schemas/ItemStateSchema'

    ItemStateSchema:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          default: "NEW"

    # Insurance Model:

    InsuranceCostSchema: # Cost
      type: object
      properties:
        currency:
          type: string
          example: "rub"
        value:
          type: integer
          format: int32
          example: 500000

    InsuranceItemSchema: # Item
      type: object
      properties:
        type:
          type: string
          description: the line "shary2023-02" is used here
          example: "shary2023-02"
        brand:
          type: string
          example: "sony"
        model:
          type: string
          example: "ps5"
        number:
          type: string
          example: "15"
        sum_insured:
          $ref: '#/components/schemas/InsuranceCostSchema'


    InsuranceMediaSchema: # Media
      type: object
      properties:
        collection:
          type: string
        key:
          type: string

    InsuranceMetadataSchema: # Metadata
      type: object
      properties:
        type:
          type: string
          description: the line "shary2023-02" is used here
          example: "shary2023-02"
        agreement_datetime:
          type: string
          format: 'date-time'
          example: "2023-04-27T09:33:07.294Z"
        lease_type:
          type: string

    InsuranceRenterSchema: # Renter
      description: When sent to the insurance company, this model is named "owner"
      type: object
      properties:
        type:
          type: string
          description: the line "shary2023-02" is used here
          example: "shary2023-02"
        first_name:
          type: string
          example: "Иван"
          minLength: 2
          maxLength: 50
        given_name:
          type: string
          example: "Иванов"
          minLength: 2
          maxLength: 50
        second_name:
          type: string
          example: "Иванович"
          maxLength: 50

    InsuranceOwnerSchema: # Owner
      description: When sent to the insurance company, this model is named "renter"
      allOf:
        - $ref: 'regular.yml#/components/schemas/FullRegularSchema'
      type: object
      properties:
        type:
          type: string
          description: the line "shary2023-02" is used here
          example: "shary2023-02"
        birthday:
          type: string
          example: "2003-01-03"
        first_name:
          type: string
          example: "Иван"
          minLength: 2
          maxLength: 50
        given_name:
          type: string
          example: "Иванович"
          maxLength: 50
        second_name:
          type: string
          example: "Иванов"
          minLength: 2
          maxLength: 50
        registration_address:
          type: string
          example: "Россия, г. Москва, улица Новый Арбат, дом 5"
        residence_address:
          type: string

    InsuranceCreationRequestSchema: # Creation Request
      type: object
      properties:
        ends_at:
          type: string
          format: 'date-time'
          example: "2023-04-30T23:59:59.294Z"
        item:
          $ref: '#/components/schemas/InsuranceItemSchema'
        lease_cost:
          $ref: '#/components/schemas/InsuranceCostSchema'
        metadata:
          $ref: '#/components/schemas/InsuranceMetadataSchema'
        starts_at:
          type: string
          format: 'date-time'
          example: "2023-04-27T10:00:59.294Z"
        completed:
          type: boolean
          example: true
        description:
          type: string
        lease_key:
          type: string
          example: "1045"
        owner:
          $ref: '#/components/schemas/InsuranceRenterSchema'
        renter:
          $ref: '#/components/schemas/InsuranceOwnerSchema'


    InsuranceCreationResponseSchema: # Creation Response
      allOf:
        - $ref: '#/components/schemas/InsuranceCreationRequestSchema'
      type: object
      properties:
        coverage:
          $ref: '#/components/schemas/InsuranceCostSchema'
        deductible:
          $ref: '#/components/schemas/InsuranceCostSchema'
        id:
          type: string
          example: "5bd6f668-e723-4b81-8f71-7b1549153368"
        policy_id:
          type: integer
          format: int64

        policy_number:
          type: string
        premium:
          $ref: '#/components/schemas/InsuranceCostSchema'
        media:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceMediaSchema'
        missed_media:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceMediaSchema'
        status:
          type: string
          example: "assembling"


    InsuranceItemResponseSchema: # Item Response
      type: object
      properties:
        completed:
          type: boolean
        coverage:
          $ref: '#/components/schemas/InsuranceCostSchema'
        deductible:
          $ref: '#/components/schemas/InsuranceCostSchema'
        ends_at:
          type: string
          format: 'date-time'
          example: "2023-04-30T23:59:59Z"
        id:
          type: string
          example: "dc2bdc2d-6047-4670-9cac-0025054f1935"
        lease_cost:
          $ref: '#/components/schemas/InsuranceCostSchema'
        lease_key:
          type: string
        policy_id:
          type: integer
          format: int64
          example: 403376
        policy_number:
          type: string
          example: "ЛЦФРИНШРНС-001817"
        premium:
          $ref: '#/components/schemas/InsuranceCostSchema'
        starts_at:
          type: string
          format: 'date-time'
          example: "2023-04-27T10:00:59Z"
        status:
          type: string
          example: "issued"


    InsuranceLeasesResponse: # List Item Response
      type: object
      properties:
        after:
          type: string
        before:
          type: string
        leases:
          type: array
          items:
            $ref: '#/components/schemas/InsuranceItemResponseSchema'
        limit:
          type: integer
          format: int32

    InsuranceLeaseCancelledSchema: # Cancelled Lease
      type: object
      properties:
        completed:
          type: boolean
          example: true
        ends_at:
          type: string
          format: 'date-time'
          example: "2023-04-30T23:59:59Z"
        id:
          type: string
          example: "5bd6f668-e723-4b81-8f71-7b1549153368"
        lease_cost:
          $ref: '#/components/schemas/InsuranceCostSchema'
        lease_key:
          type: string
          example: "1046"
        starts_at:
          type: string
          format: 'date-time'
          example: "2023-04-27T10:00:59Z"
        status:
          type: string
          example: "cancelled"


    # Document Model:

    IndividualRequestSchema:
      type: object
      properties:
        number_contract:
          type: string
          example: 5345234523
        last_name:
          type: string
          example: Сидоров
        first_name:
          type: string
          example: Игорь
        patronymic:
          type: string
          example: Петрович
        last_name_initials:
          type: string
          example: Сидоров И.П.
        citizenship:
          type: string
          example: Россия
        passport_number:
          type: string
          example: 93 27 128433
        passport_issue_date:
          type: string
          example: 20.11.2012
        passport_department:
          type: string
          example: ОТДЕЛЕНИЕМ УФМС
        product_name:
          type: string
          example: Самокат
        set:
          type: string
          example: Зарядное устройство, Чехол
        date_end:
          type: string
          example: 20.11.2023
        price_per_day:
          type: string
          example: 9000
        final_price:
          type: string
          example: 90000
        client_phone:
          type: string
          example: +79999999999
        client_address:
          type: string
          example: г. Москва
        client_email:
          type: string
          example: example@example.example
