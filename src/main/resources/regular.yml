openapi: 3.0.3
info:
  title: 'SHARY - Regular'
  description: Регулярные выражения
  version: 2.0.0
paths: {}

components:
  schemas:
    FullRegularSchema:                                                      # - All Regular
      allOf:
        - $ref: '#/components/schemas/EmailRegularSchema'                   # Email
        - $ref: '#/components/schemas/InnRegularSchema'                     # INN
        - $ref: '#/components/schemas/PhoneNumberRegularSchema'             # Phone number
        - $ref: '#/components/schemas/PassportRegularSchema'                # Passport


    PassportRegularSchema:                                                  # - Passport
      allOf:
        - $ref: '#/components/schemas/PassportNumberRegularSchema'          # Passport number
        - $ref: '#/components/schemas/PassportSeriesRegularSchema'          # Passport series

      type: object

    FullNameRegularSchema:                                                  # - Full name
      allOf:
        - $ref: '#/components/schemas/FirstNameRegularSchema'               # First name
        - $ref: '#/components/schemas/SecondNameRegularSchema'              # Second name
        - $ref: '#/components/schemas/GivenNameRegularSchema'               # Given name

      type: object

    FirstNameRegularSchema:                                                 # First Name
      type: object
      properties:
        firstName:
          type: string
          x-field-extra-annotation: |-
            @Pattern(regexp = "^[a-zA-ZА-Яа-я]$")
              @Size(min = 2, max = 50)
              @NotBlank(message = "Name should not be empty")

    SecondNameRegularSchema:                                                # Second Name
      type: object
      properties:
        secondName:
          type: string
          x-field-extra-annotation: |-
            @Pattern(regexp = "^[a-zA-ZА-Яа-я]$")
              @Size(min = 2, max = 50)
              @NotBlank(message = "Surname should not be empty")

    GivenNameRegularSchema:                                                 # Given Name
      type: object
      properties:
        givenName:
          type: string
          x-field-extra-annotation: |-
            @Pattern(regexp = "^[a-zA-ZА-Яа-я]$")
              @Size(max = 50)

    EmailRegularSchema:                                                     # Email
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
          x-field-extra-annotation: |- 
            @Pattern(regexp = "/^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i")
              @Email
              @NotBlank(message = "Email should not be empty")


    InnRegularSchema:                                                       # INN
      type: object
      properties:
        inn:
          type: string
          example: "123453488322"
          x-field-extra-annotation: |-
            @Pattern(regexp = "^(([0-9]{12})|([0-9]{10}))?$")
              @NotBlank(message = "INN should not be empty")

    PassportNumberRegularSchema:                                            # Passport number
      type: object
      properties:
        passportNumber:
          type: string
          example: '454322'
          x-field-extra-annotation: |-
            @Pattern(regexp = "^([0-9]{6})?$")
              @NotBlank(message = "Passport number should not be empty")

    PassportSeriesRegularSchema:                                            # Passport series
      type: object
      properties:
        passportSeries:
          type: string
          example: '6282 or 62 82'
          x-field-extra-annotation: |-
            @Pattern(regexp = "^([0-9]{2}\\s{0,1}[0-9]{2})?$")
              @NotBlank(message = "Passport series should not be empty")

    PhoneNumberRegularSchema:                                               # Phone number
      type: object
      properties:
        phoneNumber:
          type: string
          example: "+79008883322"
          x-field-extra-annotation: |-
            @Pattern(regexp = "^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$")
              @Size(min = 5, max = 15)
              @NotBlank(message = "Phone number should not be empty")
